name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  workflow_dispatch:
  push:
    branches: 
      - dev
      - future
      - test/file-system
    tags:
      - v[0-9]+.[0-9]+.[0-9]+ # Matches all semantic versioning tags with major, minor, patch
  pull_request:
    branches: 
      - dev
      - future

env:
  dotnet_sdk_version: '8.0.100'
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  MORYX_PACKAGE_TARGET_DEV: 'https://www.myget.org/F/moryx-oss-ci/api/v2/package'
  MORYX_PACKAGE_TARGET_V3_DEV: 'https://www.myget.org/F/moryx-oss-ci/api/v3/index.json'
  MORYX_PACKAGE_TARGET_FUTURE: 'https://www.myget.org/F/moryx-oss-ci/api/v2/package'
  MORYX_PACKAGE_TARGET_V3_FUTURE: 'https://www.myget.org/F/moryx-oss-ci/api/v3/index.json'
  MORYX_PACKAGE_TARGET_RELEASE: 'https://api.nuget.org/v3/index.json'
  MORYX_PACKAGE_TARGET_V3_RELEASE: 'https://api.nuget.org/v3/index.json'

jobs:
  EnvVar:
    runs-on: ubuntu-latest
    steps:
      - run: echo ""
    outputs:
      dotnet_sdk_version: ${{ env.dotnet_sdk_version }}
      REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
      MORYX_PACKAGE_TARGET_DEV: ${{ env.MORYX_PACKAGE_TARGET_DEV }}
      MORYX_PACKAGE_TARGET_V3_DEV: ${{ env.MORYX_PACKAGE_TARGET_V3_DEV }}
      MORYX_PACKAGE_TARGET_FUTURE: ${{ env.MORYX_PACKAGE_TARGET_FUTURE }}
      MORYX_PACKAGE_TARGET_V3_FUTURE: ${{ env.MORYX_PACKAGE_TARGET_V3_FUTURE }}
      MORYX_PACKAGE_TARGET_RELEASE: ${{ env.MORYX_PACKAGE_TARGET_RELEASE }}
      MORYX_PACKAGE_TARGET_V3_RELEASE: ${{ env.MORYX_PACKAGE_TARGET_V3_RELEASE }}

  Build:
    needs: [EnvVar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node version
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ needs.EnvVar.outputs.dotnet_sdk_version }}

      - name: Clean
        run: dotnet clean && dotnet nuget locals all --clear

      - name: Execute dotnet restore
        run: dotnet restore

      - name: Execute dotnet build
        run: |
          ASSEMBLY_VERSION="$(cat VERSION)"
          ASSEMBLY_VERSION="${ASSEMBLY_VERSION%%.*}".0.0.0
          echo "ASSEMBLY_VERSION = ${ASSEMBLY_VERSION}"
          FILE_VERSION="$(cat VERSION)"."${{github.run_number}}"
          echo "FILE_VERSION = ${FILE_VERSION}"
          INFORMATIONAL_VERSION="$(cat VERSION)"-test-file-system."${{github.run_number}}"
          echo "INFORMATIONAL_VERSION = ${INFORMATIONAL_VERSION}"
          dotnet build --configuration Release --no-restore -p:AssemblyVersion=$ASSEMBLY_VERSION -p:FileVersion=$FILE_VERSION -p:InformationalVersion=$INFORMATIONAL_VERSION
        
        
      - name: Execute dotnet pack with production version (dev or future)
        run: |
          PRODUCTION_VERSION="$(cat VERSION)"-test-file-system."${{github.run_number}}"
          echo "PRODUCTION_VERSION = ${PRODUCTION_VERSION}"
          dotnet pack --configuration Release --no-build --no-restore --output artifacts/packages -p:PackageVersion=$PRODUCTION_VERSION
        
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{needs.EnvVar.outputs.REPOSITORY_NAME}}-packages
          path: artifacts/packages/
          retention-days: 1

  UnitTests:
    needs: [EnvVar, Build]
    uses: phoenixcontact/tools/.github/workflows/unittest-tool.yml@main
    with:
      dotnet_sdk_version: ${{ needs.EnvVar.outputs.dotnet_sdk_version }}
      REPOSITORY_NAME: ${{ needs.EnvVar.outputs.REPOSITORY_NAME }}

  IntegrationTests:
    needs: [EnvVar, Build]
    uses: phoenixcontact/tools/.github/workflows/integrationtest-tool.yml@main
    with:
      dotnet_sdk_version: ${{ needs.EnvVar.outputs.dotnet_sdk_version }}
      REPOSITORY_NAME: ${{ needs.EnvVar.outputs.REPOSITORY_NAME }}

  ReportGenerator:
    needs: [EnvVar, UnitTests, IntegrationTests]
    uses: phoenixcontact/tools/.github/workflows/reportgenerator-tool.yml@main
    with:
      REPOSITORY_NAME: ${{ needs.EnvVar.outputs.REPOSITORY_NAME }}
               
  Publish-Test-Coverage:
    needs: [EnvVar, ReportGenerator]
    uses: phoenixcontact/tools/.github/workflows/publish-test-coverage-tool.yml@main
    with:
      REPOSITORY_NAME: ${{ needs.EnvVar.outputs.REPOSITORY_NAME }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # currently not working with .Net 8
  # Documentation:
  #   needs: [EnvVar, UnitTests]
  #   uses: phoenixcontact/tools/.github/workflows/documentation-tool.yml@main
  #   with:
  #     REPOSITORY_NAME: ${{ needs.EnvVar.outputs.REPOSITORY_NAME }}

  Publish:
    needs: [EnvVar, UnitTests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ needs.EnvVar.outputs.dotnet_sdk_version }}
          
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{needs.EnvVar.outputs.REPOSITORY_NAME}}-packages
          path: artifacts/packages/

      # Use if dev branch 
      - name: Publish on MyGet-CI
        env:
          MORYX_NUGET_APIKEY: ${{secrets.MYGET_TOKEN}}
          MORYX_PACKAGE_TARGET: ${{ needs.EnvVar.outputs.MORYX_PACKAGE_TARGET_DEV }}
          MORYX_PACKAGE_TARGET_V3: ${{ needs.EnvVar.outputs.MORYX_PACKAGE_TARGET_V3_DEV }}
        run: dotnet nuget push "artifacts/packages/" --api-key $MORYX_NUGET_APIKEY --source $MORYX_PACKAGE_TARGET --skip-duplicate --symbol-api-key $MORYX_NUGET_APIKEY --symbol-source $MORYX_PACKAGE_TARGET_V3